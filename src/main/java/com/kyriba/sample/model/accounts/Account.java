/*
 * Accounts
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kyriba.sample.model.accounts;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kyriba.sample.model.PaymentReconciliationOptionsModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.kyriba.sample.model.AddressModel_;
import com.kyriba.sample.model.AmountModel_;
import com.kyriba.sample.model.ContactModel;
import com.kyriba.sample.model.EstablishmentModel;
import com.kyriba.sample.model.ReferenceModel;
import com.kyriba.sample.model.UserZones;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.LocalDate;

/**
 * Account.
 */
@ApiModel(description = "Account.")
public class Account {
  @SerializedName("uuid")
  private UUID uuid = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("description2")
  private String description2 = null;

  /**
   * Type of the account. Default &#x3D; BANK_ACCOUNT
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    BANK_ACCOUNT("BANK_ACCOUNT"),
    
    INTERCOMPANY_ACCOUNT("INTERCOMPANY_ACCOUNT"),
    
    OTHER_ACCOUNT("OTHER_ACCOUNT"),
    
    SHARED_ACCOUNT("SHARED_ACCOUNT");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String text) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AccountTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("accountType")
  private AccountTypeEnum accountType = null;

  @SerializedName("closedAccount")
  private Boolean closedAccount = null;

  @SerializedName("closingDate")
  private LocalDate closingDate = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("openingDate")
  private LocalDate openingDate = null;

  @SerializedName("nonResident")
  private Boolean nonResident = null;

  @SerializedName("currency")
  private ReferenceModel currency = null;

  @SerializedName("company")
  private ReferenceModel company = null;

  @SerializedName("branch")
  private ReferenceModel branch = null;

  @SerializedName("defaultGroup")
  private ReferenceModel defaultGroup = null;

  /**
   * Bank statement layout of the account.
   */
  @JsonAdapter(BankStatementLayoutEnum.Adapter.class)
  public enum BankStatementLayoutEnum {
    AFB_120("AFB_120"),
    
    MT940_STANDARD("MT940_STANDARD"),
    
    MT940_GERMANY("MT940_GERMANY"),
    
    CBI_120("CBI_120"),
    
    BAI("BAI"),
    
    AEB_43("AEB_43"),
    
    FINSTA("FINSTA");

    private String value;

    BankStatementLayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankStatementLayoutEnum fromValue(String text) {
      for (BankStatementLayoutEnum b : BankStatementLayoutEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BankStatementLayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankStatementLayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankStatementLayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BankStatementLayoutEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("bankStatementLayout")
  private BankStatementLayoutEnum bankStatementLayout = null;

  @SerializedName("bankAccountID")
  private AccountIdModel bankAccountID = null;

  @SerializedName("bankAccountIDs")
  private List<AccountIdModel> bankAccountIDs = null;

  @SerializedName("address")
  private AddressModel_ address = null;

  @SerializedName("contact")
  private ContactModel contact = null;

  @SerializedName("calendar")
  private ReferenceModel calendar = null;

  @SerializedName("zbaGenerator")
  private Boolean zbaGenerator = null;

  @SerializedName("zbaIdentifier")
  private String zbaIdentifier = null;

  /**
   * Defines how many flows shall be generated for each ZBA actual.
   */
  @JsonAdapter(GenerateZBAFlowEnum.Adapter.class)
  public enum GenerateZBAFlowEnum {
    ONLY_WHEN_ZBA_GENERATOR("ONLY_WHEN_ZBA_GENERATOR"),
    
    ALSO_WHEN_COUNTERPARTY("ALSO_WHEN_COUNTERPARTY");

    private String value;

    GenerateZBAFlowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenerateZBAFlowEnum fromValue(String text) {
      for (GenerateZBAFlowEnum b : GenerateZBAFlowEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GenerateZBAFlowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenerateZBAFlowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenerateZBAFlowEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GenerateZBAFlowEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("generateZBAFlow")
  private GenerateZBAFlowEnum generateZBAFlow = null;

  @SerializedName("settlementAccount")
  private ReferenceModel settlementAccount = null;

  @SerializedName("counterpartySettlementAccount")
  private ReferenceModel counterpartySettlementAccount = null;

  @SerializedName("chartOfAccounts")
  private ReferenceModel chartOfAccounts = null;

  @SerializedName("glAccount")
  private ReferenceModel glAccount = null;

  @SerializedName("internalAccountCode")
  private String internalAccountCode = null;

  @SerializedName("includeInGLReconciliation")
  private Boolean includeInGLReconciliation = null;

  @SerializedName("considerBankStatementsFrom")
  private LocalDate considerBankStatementsFrom = null;

  @SerializedName("initialAccountingBalance")
  private AmountModel_ initialAccountingBalance = null;

  @SerializedName("initialAccountingBalanceDate")
  private LocalDate initialAccountingBalanceDate = null;

  @SerializedName("userZone")
  private UserZones userZone = null;

  @SerializedName("considerOneDayFloatTransactions")
  private Boolean considerOneDayFloatTransactions = null;

  @SerializedName("considerTwoDayFloatTransactions")
  private Boolean considerTwoDayFloatTransactions = null;

  @SerializedName("considerThreeDayFloatTransactions")
  private Boolean considerThreeDayFloatTransactions = null;

  @SerializedName("considerInvestmentPositionTransactions")
  private Boolean considerInvestmentPositionTransactions = null;

  @SerializedName("integrateEndOfDayStatements")
  private Boolean integrateEndOfDayStatements = null;

  @SerializedName("integrateIntradayStatements")
  private Boolean integrateIntradayStatements = null;

  @SerializedName("timeZone")
  private String timeZone = null;

  @SerializedName("cutOffTime")
  private String cutOffTime = null;

  @SerializedName("accountCategory1")
  private ReferenceModel accountCategory1 = null;

  @SerializedName("accountCategory2")
  private ReferenceModel accountCategory2 = null;

  @SerializedName("accountCategory3")
  private ReferenceModel accountCategory3 = null;

  @SerializedName("accountCategory4")
  private ReferenceModel accountCategory4 = null;

  @SerializedName("accountCategory5")
  private ReferenceModel accountCategory5 = null;

  @SerializedName("accountCategory6")
  private ReferenceModel accountCategory6 = null;

  @SerializedName("accountCategory7")
  private ReferenceModel accountCategory7 = null;

  @SerializedName("accountCategory8")
  private ReferenceModel accountCategory8 = null;

  @SerializedName("accountCategory9")
  private ReferenceModel accountCategory9 = null;

  @SerializedName("accountCategory10")
  private ReferenceModel accountCategory10 = null;

  @SerializedName("memo")
  private String memo = null;

  @SerializedName("interestBearing")
  private Boolean interestBearing = null;

  @SerializedName("centrallyManaged")
  private Boolean centrallyManaged = null;

  @SerializedName("ownerName")
  private String ownerName = null;

  @SerializedName("reconcilerName")
  private String reconcilerName = null;

  @SerializedName("freeText1")
  private String freeText1 = null;

  @SerializedName("freeText2")
  private String freeText2 = null;

  @SerializedName("freeText3")
  private String freeText3 = null;

  @SerializedName("freeAmount1")
  private BigDecimal freeAmount1 = null;

  @SerializedName("freeAmount2")
  private BigDecimal freeAmount2 = null;

  @SerializedName("freeAmount3")
  private BigDecimal freeAmount3 = null;

  @SerializedName("signatoryUsers")
  private List<ReferenceModel> signatoryUsers = null;

  @SerializedName("establishments")
  private List<EstablishmentModel> establishments = null;

  @SerializedName("domesticTransfer")
  private String domesticTransfer = null;

  @SerializedName("internationalTransfer")
  private String internationalTransfer = null;

  @SerializedName("maturityTransfer")
  private String maturityTransfer = null;

  @SerializedName("domesticDirectDebit")
  private String domesticDirectDebit = null;

  @SerializedName("internationalDirectDebit")
  private String internationalDirectDebit = null;

  @SerializedName("payablesDrafts")
  private String payablesDrafts = null;

  @SerializedName("receivablesDrafts")
  private String receivablesDrafts = null;

  @SerializedName("accountAvailableForPayments")
  private Boolean accountAvailableForPayments = null;

  @SerializedName("paymentReconciliationOptions")
  private PaymentReconciliationOptionsModel paymentReconciliationOptions = null;

  @SerializedName("accountPaymentInstructions")
  private AccountPaymentInstructions accountPaymentInstructions = null;

  public Account uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of the account.
   * @return uuid
  **/
  @ApiModelProperty(example = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", required = true, value = "UUID of the account.")
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public Account code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code that represents the account.
   * @return code
  **/
  @ApiModelProperty(example = "ACCOUNT001", required = true, value = "Code that represents the account.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Account description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Name of the account.
   * @return description
  **/
  @ApiModelProperty(example = "Account description", value = "Name of the account.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Account description2(String description2) {
    this.description2 = description2;
    return this;
  }

   /**
   * Other name of the account.
   * @return description2
  **/
  @ApiModelProperty(example = "Account description2", value = "Other name of the account.")
  public String getDescription2() {
    return description2;
  }

  public void setDescription2(String description2) {
    this.description2 = description2;
  }

  public Account accountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Type of the account. Default &#x3D; BANK_ACCOUNT
   * @return accountType
  **/
  @ApiModelProperty(example = "OTHER_ACCOUNT", value = "Type of the account. Default = BANK_ACCOUNT")
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
  }

  public Account closedAccount(Boolean closedAccount) {
    this.closedAccount = closedAccount;
    return this;
  }

   /**
   * Flag to show if account is opened (false) or closed (true). Default &#x3D; false.
   * @return closedAccount
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if account is opened (false) or closed (true). Default = false.")
  public Boolean isClosedAccount() {
    return closedAccount;
  }

  public void setClosedAccount(Boolean closedAccount) {
    this.closedAccount = closedAccount;
  }

  public Account closingDate(LocalDate closingDate) {
    this.closingDate = closingDate;
    return this;
  }

   /**
   * Date as of which the account is closed. Default: system date.
   * @return closingDate
  **/
  @ApiModelProperty(example = "2019-11-11", value = "Date as of which the account is closed. Default: system date.")
  public LocalDate getClosingDate() {
    return closingDate;
  }

  public void setClosingDate(LocalDate closingDate) {
    this.closingDate = closingDate;
  }

  public Account hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Flag to show if the data shall be hidden in all lists. Default &#x3D; false.
   * @return hidden
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if the data shall be hidden in all lists. Default = false.")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Account openingDate(LocalDate openingDate) {
    this.openingDate = openingDate;
    return this;
  }

   /**
   * Date when the account was opened. Default: system date.
   * @return openingDate
  **/
  @ApiModelProperty(example = "2019-11-11", value = "Date when the account was opened. Default: system date.")
  public LocalDate getOpeningDate() {
    return openingDate;
  }

  public void setOpeningDate(LocalDate openingDate) {
    this.openingDate = openingDate;
  }

  public Account nonResident(Boolean nonResident) {
    this.nonResident = nonResident;
    return this;
  }

   /**
   * Flag to show if the account is a non resident account (true) or a resident account (false). Default &#x3D; false.
   * @return nonResident
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if the account is a non resident account (true) or a resident account (false). Default = false.")
  public Boolean isNonResident() {
    return nonResident;
  }

  public void setNonResident(Boolean nonResident) {
    this.nonResident = nonResident;
  }

  public Account currency(ReferenceModel currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency of the account.
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "Currency of the account.")
  public ReferenceModel getCurrency() {
    return currency;
  }

  public void setCurrency(ReferenceModel currency) {
    this.currency = currency;
  }

  public Account company(ReferenceModel company) {
    this.company = company;
    return this;
  }

   /**
   * Company of the account.
   * @return company
  **/
  @ApiModelProperty(required = true, value = "Company of the account.")
  public ReferenceModel getCompany() {
    return company;
  }

  public void setCompany(ReferenceModel company) {
    this.company = company;
  }

  public Account branch(ReferenceModel branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Bank branch that holds the account.
   * @return branch
  **/
  @ApiModelProperty(required = true, value = "Bank branch that holds the account.")
  public ReferenceModel getBranch() {
    return branch;
  }

  public void setBranch(ReferenceModel branch) {
    this.branch = branch;
  }

  public Account defaultGroup(ReferenceModel defaultGroup) {
    this.defaultGroup = defaultGroup;
    return this;
  }

   /**
   * Account group of the account.
   * @return defaultGroup
  **/
  @ApiModelProperty(value = "Account group of the account.")
  public ReferenceModel getDefaultGroup() {
    return defaultGroup;
  }

  public void setDefaultGroup(ReferenceModel defaultGroup) {
    this.defaultGroup = defaultGroup;
  }

  public Account bankStatementLayout(BankStatementLayoutEnum bankStatementLayout) {
    this.bankStatementLayout = bankStatementLayout;
    return this;
  }

   /**
   * Bank statement layout of the account.
   * @return bankStatementLayout
  **/
  @ApiModelProperty(example = "FINSTA", value = "Bank statement layout of the account.")
  public BankStatementLayoutEnum getBankStatementLayout() {
    return bankStatementLayout;
  }

  public void setBankStatementLayout(BankStatementLayoutEnum bankStatementLayout) {
    this.bankStatementLayout = bankStatementLayout;
  }

  public Account bankAccountID(AccountIdModel bankAccountID) {
    this.bankAccountID = bankAccountID;
    return this;
  }

   /**
   * Account code according to the international banking standards (BAN).
   * @return bankAccountID
  **/
  @ApiModelProperty(required = true, value = "Account code according to the international banking standards (BAN).")
  public AccountIdModel getBankAccountID() {
    return bankAccountID;
  }

  public void setBankAccountID(AccountIdModel bankAccountID) {
    this.bankAccountID = bankAccountID;
  }

  public Account bankAccountIDs(List<AccountIdModel> bankAccountIDs) {
    this.bankAccountIDs = bankAccountIDs;
    return this;
  }

  public Account addBankAccountIDsItem(AccountIdModel bankAccountIDsItem) {
    if (this.bankAccountIDs == null) {
      this.bankAccountIDs = new ArrayList<AccountIdModel>();
    }
    this.bankAccountIDs.add(bankAccountIDsItem);
    return this;
  }

   /**
   * Additional BANs for the same account.
   * @return bankAccountIDs
  **/
  @ApiModelProperty(value = "Additional BANs for the same account.")
  public List<AccountIdModel> getBankAccountIDs() {
    return bankAccountIDs;
  }

  public void setBankAccountIDs(List<AccountIdModel> bankAccountIDs) {
    this.bankAccountIDs = bankAccountIDs;
  }

  public Account address(AddressModel_ address) {
    this.address = address;
    return this;
  }

   /**
   * Account&#39;s address.
   * @return address
  **/
  @ApiModelProperty(required = true, value = "Account's address.")
  public AddressModel_ getAddress() {
    return address;
  }

  public void setAddress(AddressModel_ address) {
    this.address = address;
  }

  public Account contact(ContactModel contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Account&#39;s contact.
   * @return contact
  **/
  @ApiModelProperty(value = "Account's contact.")
  public ContactModel getContact() {
    return contact;
  }

  public void setContact(ContactModel contact) {
    this.contact = contact;
  }

  public Account calendar(ReferenceModel calendar) {
    this.calendar = calendar;
    return this;
  }

   /**
   * Account&#39;s calendar.
   * @return calendar
  **/
  @ApiModelProperty(required = true, value = "Account's calendar.")
  public ReferenceModel getCalendar() {
    return calendar;
  }

  public void setCalendar(ReferenceModel calendar) {
    this.calendar = calendar;
  }

  public Account zbaGenerator(Boolean zbaGenerator) {
    this.zbaGenerator = zbaGenerator;
    return this;
  }

   /**
   * Flag to show if account can generate ZBA interco cash flows (true) or no (false). Default &#x3D; false.
   * @return zbaGenerator
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if account can generate ZBA interco cash flows (true) or no (false). Default = false.")
  public Boolean isZbaGenerator() {
    return zbaGenerator;
  }

  public void setZbaGenerator(Boolean zbaGenerator) {
    this.zbaGenerator = zbaGenerator;
  }

  public Account zbaIdentifier(String zbaIdentifier) {
    this.zbaIdentifier = zbaIdentifier;
    return this;
  }

   /**
   * Code that used by the bank to identify this account in bank statements.
   * @return zbaIdentifier
  **/
  @ApiModelProperty(example = "ZBA_IDENTIFIER", value = "Code that used by the bank to identify this account in bank statements.")
  public String getZbaIdentifier() {
    return zbaIdentifier;
  }

  public void setZbaIdentifier(String zbaIdentifier) {
    this.zbaIdentifier = zbaIdentifier;
  }

  public Account generateZBAFlow(GenerateZBAFlowEnum generateZBAFlow) {
    this.generateZBAFlow = generateZBAFlow;
    return this;
  }

   /**
   * Defines how many flows shall be generated for each ZBA actual.
   * @return generateZBAFlow
  **/
  @ApiModelProperty(example = "ONLY_WHEN_ZBA_GENERATOR", value = "Defines how many flows shall be generated for each ZBA actual.")
  public GenerateZBAFlowEnum getGenerateZBAFlow() {
    return generateZBAFlow;
  }

  public void setGenerateZBAFlow(GenerateZBAFlowEnum generateZBAFlow) {
    this.generateZBAFlow = generateZBAFlow;
  }

  public Account settlementAccount(ReferenceModel settlementAccount) {
    this.settlementAccount = settlementAccount;
    return this;
  }

   /**
   * Settlement account  of account.
   * @return settlementAccount
  **/
  @ApiModelProperty(value = "Settlement account  of account.")
  public ReferenceModel getSettlementAccount() {
    return settlementAccount;
  }

  public void setSettlementAccount(ReferenceModel settlementAccount) {
    this.settlementAccount = settlementAccount;
  }

  public Account counterpartySettlementAccount(ReferenceModel counterpartySettlementAccount) {
    this.counterpartySettlementAccount = counterpartySettlementAccount;
    return this;
  }

   /**
   * Counterparty settlement account  of account.
   * @return counterpartySettlementAccount
  **/
  @ApiModelProperty(value = "Counterparty settlement account  of account.")
  public ReferenceModel getCounterpartySettlementAccount() {
    return counterpartySettlementAccount;
  }

  public void setCounterpartySettlementAccount(ReferenceModel counterpartySettlementAccount) {
    this.counterpartySettlementAccount = counterpartySettlementAccount;
  }

  public Account chartOfAccounts(ReferenceModel chartOfAccounts) {
    this.chartOfAccounts = chartOfAccounts;
    return this;
  }

   /**
   * Chart of accounts.yaml.
   * @return chartOfAccounts
  **/
  @ApiModelProperty(value = "Chart of accounts.yaml.")
  public ReferenceModel getChartOfAccounts() {
    return chartOfAccounts;
  }

  public void setChartOfAccounts(ReferenceModel chartOfAccounts) {
    this.chartOfAccounts = chartOfAccounts;
  }

  public Account glAccount(ReferenceModel glAccount) {
    this.glAccount = glAccount;
    return this;
  }

   /**
   * GL account.
   * @return glAccount
  **/
  @ApiModelProperty(value = "GL account.")
  public ReferenceModel getGlAccount() {
    return glAccount;
  }

  public void setGlAccount(ReferenceModel glAccount) {
    this.glAccount = glAccount;
  }

  public Account internalAccountCode(String internalAccountCode) {
    this.internalAccountCode = internalAccountCode;
    return this;
  }

   /**
   * Code that represents the current account in the internal chart of GL accounts.yaml.
   * @return internalAccountCode
  **/
  @ApiModelProperty(example = "GLACCOUNT", value = "Code that represents the current account in the internal chart of GL accounts.yaml.")
  public String getInternalAccountCode() {
    return internalAccountCode;
  }

  public void setInternalAccountCode(String internalAccountCode) {
    this.internalAccountCode = internalAccountCode;
  }

  public Account includeInGLReconciliation(Boolean includeInGLReconciliation) {
    this.includeInGLReconciliation = includeInGLReconciliation;
    return this;
  }

   /**
   * Flag to show if the current account should be considered in module GR (true) or no (false). Default &#x3D; false.
   * @return includeInGLReconciliation
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if the current account should be considered in module GR (true) or no (false). Default = false.")
  public Boolean isIncludeInGLReconciliation() {
    return includeInGLReconciliation;
  }

  public void setIncludeInGLReconciliation(Boolean includeInGLReconciliation) {
    this.includeInGLReconciliation = includeInGLReconciliation;
  }

  public Account considerBankStatementsFrom(LocalDate considerBankStatementsFrom) {
    this.considerBankStatementsFrom = considerBankStatementsFrom;
    return this;
  }

   /**
   * Date as of which bank statements should be considered in the GL reconciliation process.
   * @return considerBankStatementsFrom
  **/
  @ApiModelProperty(example = "2019-11-11", value = "Date as of which bank statements should be considered in the GL reconciliation process.")
  public LocalDate getConsiderBankStatementsFrom() {
    return considerBankStatementsFrom;
  }

  public void setConsiderBankStatementsFrom(LocalDate considerBankStatementsFrom) {
    this.considerBankStatementsFrom = considerBankStatementsFrom;
  }

  public Account initialAccountingBalance(AmountModel_ initialAccountingBalance) {
    this.initialAccountingBalance = initialAccountingBalance;
    return this;
  }

   /**
   * Initial balance of the account as calculated by the Accounting system on Initial accounting balance date.
   * @return initialAccountingBalance
  **/
  @ApiModelProperty(value = "Initial balance of the account as calculated by the Accounting system on Initial accounting balance date.")
  public AmountModel_ getInitialAccountingBalance() {
    return initialAccountingBalance;
  }

  public void setInitialAccountingBalance(AmountModel_ initialAccountingBalance) {
    this.initialAccountingBalance = initialAccountingBalance;
  }

  public Account initialAccountingBalanceDate(LocalDate initialAccountingBalanceDate) {
    this.initialAccountingBalanceDate = initialAccountingBalanceDate;
    return this;
  }

   /**
   * Date of the Initial accounting balance.
   * @return initialAccountingBalanceDate
  **/
  @ApiModelProperty(example = "2019-11-11", value = "Date of the Initial accounting balance.")
  public LocalDate getInitialAccountingBalanceDate() {
    return initialAccountingBalanceDate;
  }

  public void setInitialAccountingBalanceDate(LocalDate initialAccountingBalanceDate) {
    this.initialAccountingBalanceDate = initialAccountingBalanceDate;
  }

  public Account userZone(UserZones userZone) {
    this.userZone = userZone;
    return this;
  }

   /**
   * User zone section.
   * @return userZone
  **/
  @ApiModelProperty(value = "User zone section.")
  public UserZones getUserZone() {
    return userZone;
  }

  public void setUserZone(UserZones userZone) {
    this.userZone = userZone;
  }

  public Account considerOneDayFloatTransactions(Boolean considerOneDayFloatTransactions) {
    this.considerOneDayFloatTransactions = considerOneDayFloatTransactions;
    return this;
  }

   /**
   * Flag to show if “one day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default &#x3D; false.
   * @return considerOneDayFloatTransactions
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if “one day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default = false.")
  public Boolean isConsiderOneDayFloatTransactions() {
    return considerOneDayFloatTransactions;
  }

  public void setConsiderOneDayFloatTransactions(Boolean considerOneDayFloatTransactions) {
    this.considerOneDayFloatTransactions = considerOneDayFloatTransactions;
  }

  public Account considerTwoDayFloatTransactions(Boolean considerTwoDayFloatTransactions) {
    this.considerTwoDayFloatTransactions = considerTwoDayFloatTransactions;
    return this;
  }

   /**
   * Flag to show if “two day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default &#x3D; false.
   * @return considerTwoDayFloatTransactions
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if “two day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default = false.")
  public Boolean isConsiderTwoDayFloatTransactions() {
    return considerTwoDayFloatTransactions;
  }

  public void setConsiderTwoDayFloatTransactions(Boolean considerTwoDayFloatTransactions) {
    this.considerTwoDayFloatTransactions = considerTwoDayFloatTransactions;
  }

  public Account considerThreeDayFloatTransactions(Boolean considerThreeDayFloatTransactions) {
    this.considerThreeDayFloatTransactions = considerThreeDayFloatTransactions;
    return this;
  }

   /**
   * Flag to show if “three day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default &#x3D; false.
   * @return considerThreeDayFloatTransactions
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if “three day float” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default = false.")
  public Boolean isConsiderThreeDayFloatTransactions() {
    return considerThreeDayFloatTransactions;
  }

  public void setConsiderThreeDayFloatTransactions(Boolean considerThreeDayFloatTransactions) {
    this.considerThreeDayFloatTransactions = considerThreeDayFloatTransactions;
  }

  public Account considerInvestmentPositionTransactions(Boolean considerInvestmentPositionTransactions) {
    this.considerInvestmentPositionTransactions = considerInvestmentPositionTransactions;
    return this;
  }

   /**
   * Flag to show if “investment position” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default &#x3D; false.
   * @return considerInvestmentPositionTransactions
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if “investment position” bank transactions should be considered when calculating the account initial balance (true) or no (false). Default = false.")
  public Boolean isConsiderInvestmentPositionTransactions() {
    return considerInvestmentPositionTransactions;
  }

  public void setConsiderInvestmentPositionTransactions(Boolean considerInvestmentPositionTransactions) {
    this.considerInvestmentPositionTransactions = considerInvestmentPositionTransactions;
  }

  public Account integrateEndOfDayStatements(Boolean integrateEndOfDayStatements) {
    this.integrateEndOfDayStatements = integrateEndOfDayStatements;
    return this;
  }

   /**
   * Flag to show if End-of-day bank statements should be integrated (true) or no (false). Default &#x3D; true.
   * @return integrateEndOfDayStatements
  **/
  @ApiModelProperty(example = "true", value = "Flag to show if End-of-day bank statements should be integrated (true) or no (false). Default = true.")
  public Boolean isIntegrateEndOfDayStatements() {
    return integrateEndOfDayStatements;
  }

  public void setIntegrateEndOfDayStatements(Boolean integrateEndOfDayStatements) {
    this.integrateEndOfDayStatements = integrateEndOfDayStatements;
  }

  public Account integrateIntradayStatements(Boolean integrateIntradayStatements) {
    this.integrateIntradayStatements = integrateIntradayStatements;
    return this;
  }

   /**
   * Flag to show if Intraday bank statements should be integrated (true) or no (false). Default &#x3D; false.
   * @return integrateIntradayStatements
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if Intraday bank statements should be integrated (true) or no (false). Default = false.")
  public Boolean isIntegrateIntradayStatements() {
    return integrateIntradayStatements;
  }

  public void setIntegrateIntradayStatements(Boolean integrateIntradayStatements) {
    this.integrateIntradayStatements = integrateIntradayStatements;
  }

  public Account timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Account&#39;s time zone.
   * @return timeZone
  **/
  @ApiModelProperty(example = "GMT", required = true, value = "Account's time zone.")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public Account cutOffTime(String cutOffTime) {
    this.cutOffTime = cutOffTime;
    return this;
  }

   /**
   * Time until which the intraday bank statements should be considered.
   * @return cutOffTime
  **/
  @ApiModelProperty(example = "20:00:00", value = "Time until which the intraday bank statements should be considered.")
  public String getCutOffTime() {
    return cutOffTime;
  }

  public void setCutOffTime(String cutOffTime) {
    this.cutOffTime = cutOffTime;
  }

  public Account accountCategory1(ReferenceModel accountCategory1) {
    this.accountCategory1 = accountCategory1;
    return this;
  }

   /**
   * Account category 1.
   * @return accountCategory1
  **/
  @ApiModelProperty(value = "Account category 1.")
  public ReferenceModel getAccountCategory1() {
    return accountCategory1;
  }

  public void setAccountCategory1(ReferenceModel accountCategory1) {
    this.accountCategory1 = accountCategory1;
  }

  public Account accountCategory2(ReferenceModel accountCategory2) {
    this.accountCategory2 = accountCategory2;
    return this;
  }

   /**
   * Account category 2.
   * @return accountCategory2
  **/
  @ApiModelProperty(value = "Account category 2.")
  public ReferenceModel getAccountCategory2() {
    return accountCategory2;
  }

  public void setAccountCategory2(ReferenceModel accountCategory2) {
    this.accountCategory2 = accountCategory2;
  }

  public Account accountCategory3(ReferenceModel accountCategory3) {
    this.accountCategory3 = accountCategory3;
    return this;
  }

   /**
   * Account category 3.
   * @return accountCategory3
  **/
  @ApiModelProperty(value = "Account category 3.")
  public ReferenceModel getAccountCategory3() {
    return accountCategory3;
  }

  public void setAccountCategory3(ReferenceModel accountCategory3) {
    this.accountCategory3 = accountCategory3;
  }

  public Account accountCategory4(ReferenceModel accountCategory4) {
    this.accountCategory4 = accountCategory4;
    return this;
  }

   /**
   * Account category 4.
   * @return accountCategory4
  **/
  @ApiModelProperty(value = "Account category 4.")
  public ReferenceModel getAccountCategory4() {
    return accountCategory4;
  }

  public void setAccountCategory4(ReferenceModel accountCategory4) {
    this.accountCategory4 = accountCategory4;
  }

  public Account accountCategory5(ReferenceModel accountCategory5) {
    this.accountCategory5 = accountCategory5;
    return this;
  }

   /**
   * Account category 5.
   * @return accountCategory5
  **/
  @ApiModelProperty(value = "Account category 5.")
  public ReferenceModel getAccountCategory5() {
    return accountCategory5;
  }

  public void setAccountCategory5(ReferenceModel accountCategory5) {
    this.accountCategory5 = accountCategory5;
  }

  public Account accountCategory6(ReferenceModel accountCategory6) {
    this.accountCategory6 = accountCategory6;
    return this;
  }

   /**
   * Account category 6.
   * @return accountCategory6
  **/
  @ApiModelProperty(value = "Account category 6.")
  public ReferenceModel getAccountCategory6() {
    return accountCategory6;
  }

  public void setAccountCategory6(ReferenceModel accountCategory6) {
    this.accountCategory6 = accountCategory6;
  }

  public Account accountCategory7(ReferenceModel accountCategory7) {
    this.accountCategory7 = accountCategory7;
    return this;
  }

   /**
   * Account category 7.
   * @return accountCategory7
  **/
  @ApiModelProperty(value = "Account category 7.")
  public ReferenceModel getAccountCategory7() {
    return accountCategory7;
  }

  public void setAccountCategory7(ReferenceModel accountCategory7) {
    this.accountCategory7 = accountCategory7;
  }

  public Account accountCategory8(ReferenceModel accountCategory8) {
    this.accountCategory8 = accountCategory8;
    return this;
  }

   /**
   * Account category 8.
   * @return accountCategory8
  **/
  @ApiModelProperty(value = "Account category 8.")
  public ReferenceModel getAccountCategory8() {
    return accountCategory8;
  }

  public void setAccountCategory8(ReferenceModel accountCategory8) {
    this.accountCategory8 = accountCategory8;
  }

  public Account accountCategory9(ReferenceModel accountCategory9) {
    this.accountCategory9 = accountCategory9;
    return this;
  }

   /**
   * Account category 9.
   * @return accountCategory9
  **/
  @ApiModelProperty(value = "Account category 9.")
  public ReferenceModel getAccountCategory9() {
    return accountCategory9;
  }

  public void setAccountCategory9(ReferenceModel accountCategory9) {
    this.accountCategory9 = accountCategory9;
  }

  public Account accountCategory10(ReferenceModel accountCategory10) {
    this.accountCategory10 = accountCategory10;
    return this;
  }

   /**
   * Account category 10.
   * @return accountCategory10
  **/
  @ApiModelProperty(value = "Account category 10.")
  public ReferenceModel getAccountCategory10() {
    return accountCategory10;
  }

  public void setAccountCategory10(ReferenceModel accountCategory10) {
    this.accountCategory10 = accountCategory10;
  }

  public Account memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Account&#39;s memo
   * @return memo
  **/
  @ApiModelProperty(value = "Account's memo")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }

  public Account interestBearing(Boolean interestBearing) {
    this.interestBearing = interestBearing;
    return this;
  }

   /**
   * Flag to show if the account is interest bearing (true) or no (false). Default &#x3D; false.
   * @return interestBearing
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if the account is interest bearing (true) or no (false). Default = false.")
  public Boolean isInterestBearing() {
    return interestBearing;
  }

  public void setInterestBearing(Boolean interestBearing) {
    this.interestBearing = interestBearing;
  }

  public Account centrallyManaged(Boolean centrallyManaged) {
    this.centrallyManaged = centrallyManaged;
    return this;
  }

   /**
   * Flag to show if the account is managed by Central Treasury (true) or no (false). Default &#x3D; false.
   * @return centrallyManaged
  **/
  @ApiModelProperty(example = "false", value = "Flag to show if the account is managed by Central Treasury (true) or no (false). Default = false.")
  public Boolean isCentrallyManaged() {
    return centrallyManaged;
  }

  public void setCentrallyManaged(Boolean centrallyManaged) {
    this.centrallyManaged = centrallyManaged;
  }

  public Account ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

   /**
   * Name of the account owner
   * @return ownerName
  **/
  @ApiModelProperty(value = "Name of the account owner")
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }

  public Account reconcilerName(String reconcilerName) {
    this.reconcilerName = reconcilerName;
    return this;
  }

   /**
   * Name of the user in charge of the account reconciliation
   * @return reconcilerName
  **/
  @ApiModelProperty(value = "Name of the user in charge of the account reconciliation")
  public String getReconcilerName() {
    return reconcilerName;
  }

  public void setReconcilerName(String reconcilerName) {
    this.reconcilerName = reconcilerName;
  }

  public Account freeText1(String freeText1) {
    this.freeText1 = freeText1;
    return this;
  }

   /**
   * Free zone 1
   * @return freeText1
  **/
  @ApiModelProperty(value = "Free zone 1")
  public String getFreeText1() {
    return freeText1;
  }

  public void setFreeText1(String freeText1) {
    this.freeText1 = freeText1;
  }

  public Account freeText2(String freeText2) {
    this.freeText2 = freeText2;
    return this;
  }

   /**
   * Free zone 2
   * @return freeText2
  **/
  @ApiModelProperty(value = "Free zone 2")
  public String getFreeText2() {
    return freeText2;
  }

  public void setFreeText2(String freeText2) {
    this.freeText2 = freeText2;
  }

  public Account freeText3(String freeText3) {
    this.freeText3 = freeText3;
    return this;
  }

   /**
   * Free zone 3
   * @return freeText3
  **/
  @ApiModelProperty(value = "Free zone 3")
  public String getFreeText3() {
    return freeText3;
  }

  public void setFreeText3(String freeText3) {
    this.freeText3 = freeText3;
  }

  public Account freeAmount1(BigDecimal freeAmount1) {
    this.freeAmount1 = freeAmount1;
    return this;
  }

   /**
   * Free amount 1.
   * @return freeAmount1
  **/
  @ApiModelProperty(example = "1.123", value = "Free amount 1.")
  public BigDecimal getFreeAmount1() {
    return freeAmount1;
  }

  public void setFreeAmount1(BigDecimal freeAmount1) {
    this.freeAmount1 = freeAmount1;
  }

  public Account freeAmount2(BigDecimal freeAmount2) {
    this.freeAmount2 = freeAmount2;
    return this;
  }

   /**
   * Free amount 2.
   * @return freeAmount2
  **/
  @ApiModelProperty(example = "1.123", value = "Free amount 2.")
  public BigDecimal getFreeAmount2() {
    return freeAmount2;
  }

  public void setFreeAmount2(BigDecimal freeAmount2) {
    this.freeAmount2 = freeAmount2;
  }

  public Account freeAmount3(BigDecimal freeAmount3) {
    this.freeAmount3 = freeAmount3;
    return this;
  }

   /**
   * Free amount 3.
   * @return freeAmount3
  **/
  @ApiModelProperty(example = "1.123", value = "Free amount 3.")
  public BigDecimal getFreeAmount3() {
    return freeAmount3;
  }

  public void setFreeAmount3(BigDecimal freeAmount3) {
    this.freeAmount3 = freeAmount3;
  }

  public Account signatoryUsers(List<ReferenceModel> signatoryUsers) {
    this.signatoryUsers = signatoryUsers;
    return this;
  }

  public Account addSignatoryUsersItem(ReferenceModel signatoryUsersItem) {
    if (this.signatoryUsers == null) {
      this.signatoryUsers = new ArrayList<ReferenceModel>();
    }
    this.signatoryUsers.add(signatoryUsersItem);
    return this;
  }

   /**
   * List of users who have authority over the account.
   * @return signatoryUsers
  **/
  @ApiModelProperty(value = "List of users who have authority over the account.")
  public List<ReferenceModel> getSignatoryUsers() {
    return signatoryUsers;
  }

  public void setSignatoryUsers(List<ReferenceModel> signatoryUsers) {
    this.signatoryUsers = signatoryUsers;
  }

  public Account establishments(List<EstablishmentModel> establishments) {
    this.establishments = establishments;
    return this;
  }

  public Account addEstablishmentsItem(EstablishmentModel establishmentsItem) {
    if (this.establishments == null) {
      this.establishments = new ArrayList<EstablishmentModel>();
    }
    this.establishments.add(establishmentsItem);
    return this;
  }

   /**
   * List of the multiple establishments to which the current account belongs.
   * @return establishments
  **/
  @ApiModelProperty(value = "List of the multiple establishments to which the current account belongs.")
  public List<EstablishmentModel> getEstablishments() {
    return establishments;
  }

  public void setEstablishments(List<EstablishmentModel> establishments) {
    this.establishments = establishments;
  }

  public Account domesticTransfer(String domesticTransfer) {
    this.domesticTransfer = domesticTransfer;
    return this;
  }

   /**
   * Issuer number to be used for Domestic transfer
   * @return domesticTransfer
  **/
  @ApiModelProperty(value = "Issuer number to be used for Domestic transfer")
  public String getDomesticTransfer() {
    return domesticTransfer;
  }

  public void setDomesticTransfer(String domesticTransfer) {
    this.domesticTransfer = domesticTransfer;
  }

  public Account internationalTransfer(String internationalTransfer) {
    this.internationalTransfer = internationalTransfer;
    return this;
  }

   /**
   * Issuer number to be used for International transfer
   * @return internationalTransfer
  **/
  @ApiModelProperty(value = "Issuer number to be used for International transfer")
  public String getInternationalTransfer() {
    return internationalTransfer;
  }

  public void setInternationalTransfer(String internationalTransfer) {
    this.internationalTransfer = internationalTransfer;
  }

  public Account maturityTransfer(String maturityTransfer) {
    this.maturityTransfer = maturityTransfer;
    return this;
  }

   /**
   * Issuer number to be used for Maturity transfer
   * @return maturityTransfer
  **/
  @ApiModelProperty(value = "Issuer number to be used for Maturity transfer")
  public String getMaturityTransfer() {
    return maturityTransfer;
  }

  public void setMaturityTransfer(String maturityTransfer) {
    this.maturityTransfer = maturityTransfer;
  }

  public Account domesticDirectDebit(String domesticDirectDebit) {
    this.domesticDirectDebit = domesticDirectDebit;
    return this;
  }

   /**
   * Issuer number to be used for Domestic direct debit
   * @return domesticDirectDebit
  **/
  @ApiModelProperty(value = "Issuer number to be used for Domestic direct debit")
  public String getDomesticDirectDebit() {
    return domesticDirectDebit;
  }

  public void setDomesticDirectDebit(String domesticDirectDebit) {
    this.domesticDirectDebit = domesticDirectDebit;
  }

  public Account internationalDirectDebit(String internationalDirectDebit) {
    this.internationalDirectDebit = internationalDirectDebit;
    return this;
  }

   /**
   * Issuer number to be used for International direct debit
   * @return internationalDirectDebit
  **/
  @ApiModelProperty(value = "Issuer number to be used for International direct debit")
  public String getInternationalDirectDebit() {
    return internationalDirectDebit;
  }

  public void setInternationalDirectDebit(String internationalDirectDebit) {
    this.internationalDirectDebit = internationalDirectDebit;
  }

  public Account payablesDrafts(String payablesDrafts) {
    this.payablesDrafts = payablesDrafts;
    return this;
  }

   /**
   * Issuer number to be used for Payables drafts
   * @return payablesDrafts
  **/
  @ApiModelProperty(value = "Issuer number to be used for Payables drafts")
  public String getPayablesDrafts() {
    return payablesDrafts;
  }

  public void setPayablesDrafts(String payablesDrafts) {
    this.payablesDrafts = payablesDrafts;
  }

  public Account receivablesDrafts(String receivablesDrafts) {
    this.receivablesDrafts = receivablesDrafts;
    return this;
  }

   /**
   * Issuer number to be used for Receivables drafts
   * @return receivablesDrafts
  **/
  @ApiModelProperty(value = "Issuer number to be used for Receivables drafts")
  public String getReceivablesDrafts() {
    return receivablesDrafts;
  }

  public void setReceivablesDrafts(String receivablesDrafts) {
    this.receivablesDrafts = receivablesDrafts;
  }

  public Account accountAvailableForPayments(Boolean accountAvailableForPayments) {
    this.accountAvailableForPayments = accountAvailableForPayments;
    return this;
  }

   /**
   * Flag to show if account is available for payments (true) or no (false). Default &#x3D; true.
   * @return accountAvailableForPayments
  **/
  @ApiModelProperty(example = "true", value = "Flag to show if account is available for payments (true) or no (false). Default = true.")
  public Boolean isAccountAvailableForPayments() {
    return accountAvailableForPayments;
  }

  public void setAccountAvailableForPayments(Boolean accountAvailableForPayments) {
    this.accountAvailableForPayments = accountAvailableForPayments;
  }

  public Account paymentReconciliationOptions(PaymentReconciliationOptionsModel paymentReconciliationOptions) {
    this.paymentReconciliationOptions = paymentReconciliationOptions;
    return this;
  }

   /**
   * Check payments info.
   * @return paymentReconciliationOptions
  **/
  @ApiModelProperty(value = "Check payments info.")
  public PaymentReconciliationOptionsModel getPaymentReconciliationOptions() {
    return paymentReconciliationOptions;
  }

  public void setPaymentReconciliationOptions(PaymentReconciliationOptionsModel paymentReconciliationOptions) {
    this.paymentReconciliationOptions = paymentReconciliationOptions;
  }

  public Account accountPaymentInstructions(AccountPaymentInstructions accountPaymentInstructions) {
    this.accountPaymentInstructions = accountPaymentInstructions;
    return this;
  }

   /**
   * Correspondent info.
   * @return accountPaymentInstructions
  **/
  @ApiModelProperty(value = "Correspondent info.")
  public AccountPaymentInstructions getAccountPaymentInstructions() {
    return accountPaymentInstructions;
  }

  public void setAccountPaymentInstructions(AccountPaymentInstructions accountPaymentInstructions) {
    this.accountPaymentInstructions = accountPaymentInstructions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.uuid, account.uuid) &&
        Objects.equals(this.code, account.code) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.description2, account.description2) &&
        Objects.equals(this.accountType, account.accountType) &&
        Objects.equals(this.closedAccount, account.closedAccount) &&
        Objects.equals(this.closingDate, account.closingDate) &&
        Objects.equals(this.hidden, account.hidden) &&
        Objects.equals(this.openingDate, account.openingDate) &&
        Objects.equals(this.nonResident, account.nonResident) &&
        Objects.equals(this.currency, account.currency) &&
        Objects.equals(this.company, account.company) &&
        Objects.equals(this.branch, account.branch) &&
        Objects.equals(this.defaultGroup, account.defaultGroup) &&
        Objects.equals(this.bankStatementLayout, account.bankStatementLayout) &&
        Objects.equals(this.bankAccountID, account.bankAccountID) &&
        Objects.equals(this.bankAccountIDs, account.bankAccountIDs) &&
        Objects.equals(this.address, account.address) &&
        Objects.equals(this.contact, account.contact) &&
        Objects.equals(this.calendar, account.calendar) &&
        Objects.equals(this.zbaGenerator, account.zbaGenerator) &&
        Objects.equals(this.zbaIdentifier, account.zbaIdentifier) &&
        Objects.equals(this.generateZBAFlow, account.generateZBAFlow) &&
        Objects.equals(this.settlementAccount, account.settlementAccount) &&
        Objects.equals(this.counterpartySettlementAccount, account.counterpartySettlementAccount) &&
        Objects.equals(this.chartOfAccounts, account.chartOfAccounts) &&
        Objects.equals(this.glAccount, account.glAccount) &&
        Objects.equals(this.internalAccountCode, account.internalAccountCode) &&
        Objects.equals(this.includeInGLReconciliation, account.includeInGLReconciliation) &&
        Objects.equals(this.considerBankStatementsFrom, account.considerBankStatementsFrom) &&
        Objects.equals(this.initialAccountingBalance, account.initialAccountingBalance) &&
        Objects.equals(this.initialAccountingBalanceDate, account.initialAccountingBalanceDate) &&
        Objects.equals(this.userZone, account.userZone) &&
        Objects.equals(this.considerOneDayFloatTransactions, account.considerOneDayFloatTransactions) &&
        Objects.equals(this.considerTwoDayFloatTransactions, account.considerTwoDayFloatTransactions) &&
        Objects.equals(this.considerThreeDayFloatTransactions, account.considerThreeDayFloatTransactions) &&
        Objects.equals(this.considerInvestmentPositionTransactions, account.considerInvestmentPositionTransactions) &&
        Objects.equals(this.integrateEndOfDayStatements, account.integrateEndOfDayStatements) &&
        Objects.equals(this.integrateIntradayStatements, account.integrateIntradayStatements) &&
        Objects.equals(this.timeZone, account.timeZone) &&
        Objects.equals(this.cutOffTime, account.cutOffTime) &&
        Objects.equals(this.accountCategory1, account.accountCategory1) &&
        Objects.equals(this.accountCategory2, account.accountCategory2) &&
        Objects.equals(this.accountCategory3, account.accountCategory3) &&
        Objects.equals(this.accountCategory4, account.accountCategory4) &&
        Objects.equals(this.accountCategory5, account.accountCategory5) &&
        Objects.equals(this.accountCategory6, account.accountCategory6) &&
        Objects.equals(this.accountCategory7, account.accountCategory7) &&
        Objects.equals(this.accountCategory8, account.accountCategory8) &&
        Objects.equals(this.accountCategory9, account.accountCategory9) &&
        Objects.equals(this.accountCategory10, account.accountCategory10) &&
        Objects.equals(this.memo, account.memo) &&
        Objects.equals(this.interestBearing, account.interestBearing) &&
        Objects.equals(this.centrallyManaged, account.centrallyManaged) &&
        Objects.equals(this.ownerName, account.ownerName) &&
        Objects.equals(this.reconcilerName, account.reconcilerName) &&
        Objects.equals(this.freeText1, account.freeText1) &&
        Objects.equals(this.freeText2, account.freeText2) &&
        Objects.equals(this.freeText3, account.freeText3) &&
        Objects.equals(this.freeAmount1, account.freeAmount1) &&
        Objects.equals(this.freeAmount2, account.freeAmount2) &&
        Objects.equals(this.freeAmount3, account.freeAmount3) &&
        Objects.equals(this.signatoryUsers, account.signatoryUsers) &&
        Objects.equals(this.establishments, account.establishments) &&
        Objects.equals(this.domesticTransfer, account.domesticTransfer) &&
        Objects.equals(this.internationalTransfer, account.internationalTransfer) &&
        Objects.equals(this.maturityTransfer, account.maturityTransfer) &&
        Objects.equals(this.domesticDirectDebit, account.domesticDirectDebit) &&
        Objects.equals(this.internationalDirectDebit, account.internationalDirectDebit) &&
        Objects.equals(this.payablesDrafts, account.payablesDrafts) &&
        Objects.equals(this.receivablesDrafts, account.receivablesDrafts) &&
        Objects.equals(this.accountAvailableForPayments, account.accountAvailableForPayments) &&
        Objects.equals(this.paymentReconciliationOptions, account.paymentReconciliationOptions) &&
        Objects.equals(this.accountPaymentInstructions, account.accountPaymentInstructions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, code, description, description2, accountType, closedAccount, closingDate, hidden, openingDate, nonResident, currency, company, branch, defaultGroup, bankStatementLayout, bankAccountID, bankAccountIDs, address, contact, calendar, zbaGenerator, zbaIdentifier, generateZBAFlow, settlementAccount, counterpartySettlementAccount, chartOfAccounts, glAccount, internalAccountCode, includeInGLReconciliation, considerBankStatementsFrom, initialAccountingBalance, initialAccountingBalanceDate, userZone, considerOneDayFloatTransactions, considerTwoDayFloatTransactions, considerThreeDayFloatTransactions, considerInvestmentPositionTransactions, integrateEndOfDayStatements, integrateIntradayStatements, timeZone, cutOffTime, accountCategory1, accountCategory2, accountCategory3, accountCategory4, accountCategory5, accountCategory6, accountCategory7, accountCategory8, accountCategory9, accountCategory10, memo, interestBearing, centrallyManaged, ownerName, reconcilerName, freeText1, freeText2, freeText3, freeAmount1, freeAmount2, freeAmount3, signatoryUsers, establishments, domesticTransfer, internationalTransfer, maturityTransfer, domesticDirectDebit, internationalDirectDebit, payablesDrafts, receivablesDrafts, accountAvailableForPayments, paymentReconciliationOptions, accountPaymentInstructions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    description2: ").append(toIndentedString(description2)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    closedAccount: ").append(toIndentedString(closedAccount)).append("\n");
    sb.append("    closingDate: ").append(toIndentedString(closingDate)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    openingDate: ").append(toIndentedString(openingDate)).append("\n");
    sb.append("    nonResident: ").append(toIndentedString(nonResident)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    defaultGroup: ").append(toIndentedString(defaultGroup)).append("\n");
    sb.append("    bankStatementLayout: ").append(toIndentedString(bankStatementLayout)).append("\n");
    sb.append("    bankAccountID: ").append(toIndentedString(bankAccountID)).append("\n");
    sb.append("    bankAccountIDs: ").append(toIndentedString(bankAccountIDs)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    zbaGenerator: ").append(toIndentedString(zbaGenerator)).append("\n");
    sb.append("    zbaIdentifier: ").append(toIndentedString(zbaIdentifier)).append("\n");
    sb.append("    generateZBAFlow: ").append(toIndentedString(generateZBAFlow)).append("\n");
    sb.append("    settlementAccount: ").append(toIndentedString(settlementAccount)).append("\n");
    sb.append("    counterpartySettlementAccount: ").append(toIndentedString(counterpartySettlementAccount)).append("\n");
    sb.append("    chartOfAccounts: ").append(toIndentedString(chartOfAccounts)).append("\n");
    sb.append("    glAccount: ").append(toIndentedString(glAccount)).append("\n");
    sb.append("    internalAccountCode: ").append(toIndentedString(internalAccountCode)).append("\n");
    sb.append("    includeInGLReconciliation: ").append(toIndentedString(includeInGLReconciliation)).append("\n");
    sb.append("    considerBankStatementsFrom: ").append(toIndentedString(considerBankStatementsFrom)).append("\n");
    sb.append("    initialAccountingBalance: ").append(toIndentedString(initialAccountingBalance)).append("\n");
    sb.append("    initialAccountingBalanceDate: ").append(toIndentedString(initialAccountingBalanceDate)).append("\n");
    sb.append("    userZone: ").append(toIndentedString(userZone)).append("\n");
    sb.append("    considerOneDayFloatTransactions: ").append(toIndentedString(considerOneDayFloatTransactions)).append("\n");
    sb.append("    considerTwoDayFloatTransactions: ").append(toIndentedString(considerTwoDayFloatTransactions)).append("\n");
    sb.append("    considerThreeDayFloatTransactions: ").append(toIndentedString(considerThreeDayFloatTransactions)).append("\n");
    sb.append("    considerInvestmentPositionTransactions: ").append(toIndentedString(considerInvestmentPositionTransactions)).append("\n");
    sb.append("    integrateEndOfDayStatements: ").append(toIndentedString(integrateEndOfDayStatements)).append("\n");
    sb.append("    integrateIntradayStatements: ").append(toIndentedString(integrateIntradayStatements)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    cutOffTime: ").append(toIndentedString(cutOffTime)).append("\n");
    sb.append("    accountCategory1: ").append(toIndentedString(accountCategory1)).append("\n");
    sb.append("    accountCategory2: ").append(toIndentedString(accountCategory2)).append("\n");
    sb.append("    accountCategory3: ").append(toIndentedString(accountCategory3)).append("\n");
    sb.append("    accountCategory4: ").append(toIndentedString(accountCategory4)).append("\n");
    sb.append("    accountCategory5: ").append(toIndentedString(accountCategory5)).append("\n");
    sb.append("    accountCategory6: ").append(toIndentedString(accountCategory6)).append("\n");
    sb.append("    accountCategory7: ").append(toIndentedString(accountCategory7)).append("\n");
    sb.append("    accountCategory8: ").append(toIndentedString(accountCategory8)).append("\n");
    sb.append("    accountCategory9: ").append(toIndentedString(accountCategory9)).append("\n");
    sb.append("    accountCategory10: ").append(toIndentedString(accountCategory10)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    interestBearing: ").append(toIndentedString(interestBearing)).append("\n");
    sb.append("    centrallyManaged: ").append(toIndentedString(centrallyManaged)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    reconcilerName: ").append(toIndentedString(reconcilerName)).append("\n");
    sb.append("    freeText1: ").append(toIndentedString(freeText1)).append("\n");
    sb.append("    freeText2: ").append(toIndentedString(freeText2)).append("\n");
    sb.append("    freeText3: ").append(toIndentedString(freeText3)).append("\n");
    sb.append("    freeAmount1: ").append(toIndentedString(freeAmount1)).append("\n");
    sb.append("    freeAmount2: ").append(toIndentedString(freeAmount2)).append("\n");
    sb.append("    freeAmount3: ").append(toIndentedString(freeAmount3)).append("\n");
    sb.append("    signatoryUsers: ").append(toIndentedString(signatoryUsers)).append("\n");
    sb.append("    establishments: ").append(toIndentedString(establishments)).append("\n");
    sb.append("    domesticTransfer: ").append(toIndentedString(domesticTransfer)).append("\n");
    sb.append("    internationalTransfer: ").append(toIndentedString(internationalTransfer)).append("\n");
    sb.append("    maturityTransfer: ").append(toIndentedString(maturityTransfer)).append("\n");
    sb.append("    domesticDirectDebit: ").append(toIndentedString(domesticDirectDebit)).append("\n");
    sb.append("    internationalDirectDebit: ").append(toIndentedString(internationalDirectDebit)).append("\n");
    sb.append("    payablesDrafts: ").append(toIndentedString(payablesDrafts)).append("\n");
    sb.append("    receivablesDrafts: ").append(toIndentedString(receivablesDrafts)).append("\n");
    sb.append("    accountAvailableForPayments: ").append(toIndentedString(accountAvailableForPayments)).append("\n");
    sb.append("    paymentReconciliationOptions: ").append(toIndentedString(paymentReconciliationOptions)).append("\n");
    sb.append("    accountPaymentInstructions: ").append(toIndentedString(accountPaymentInstructions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

